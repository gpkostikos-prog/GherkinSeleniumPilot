
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview This file defines a Genkit flow for converting Gherkin test cases
 * into a generic, human-readable test script syntax.
 *
 * - convertGherkinToTestScript - A function that takes Gherkin and generates a test script.
 * - ConvertGherkinToTestScriptInput - The input type for the function.
 * - ConvertGherkinToTestScriptOutput - The return type for the function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ConvertGherkinToTestScriptInputSchema = z.object({
  gherkinInput: z.string().describe('The Gherkin test cases to be converted.'),
  htmlContext: z.string().describe('Optional: A snippet of relevant HTML source code to help the AI understand UI elements or application structure.').optional(),
  codeSnippets: z.string().describe('Optional: Snippets of existing relevant code to provide context on application logic or existing automation patterns.').optional(),
  snippetLanguage: z.string().describe('Optional: The programming language of the "Code Snippets" provided.').optional(),
});
export type ConvertGherkinToTestScriptInput = z.infer<typeof ConvertGherkinToTestScriptInputSchema>;

const ConvertGherkinToTestScriptOutputSchema = z.object({
  testScript: z.string().describe('The generated script in a human-readable, command-based syntax.'),
});
export type ConvertGherkinToTestScriptOutput = z.infer<typeof ConvertGherkinToTestScriptOutputSchema>;

export async function convertGherkinToTestScript(input: ConvertGherkinToTestScriptInput): Promise<ConvertGherkinToTestScriptOutput> {
  return convertGherkinToTestScriptFlow(input);
}

const prompt = ai.definePrompt({
  name: 'convertGherkinToTestScriptPrompt',
  input: {schema: ConvertGherkinToTestScriptInputSchema},
  output: {schema: ConvertGherkinToTestScriptOutputSchema},
  prompt: `You are an expert in test automation.
Your task is to convert the following Gherkin test cases into a generic, human-readable test script format.
The output should be a sequence of commands. Each command should typically start with an asterisk (*).

Instructions:
1.  Analyze each Gherkin \`Scenario:\` block independently.
2.  For each Gherkin step (Given, When, Then, And, But) within a scenario, translate it into one or more corresponding test script commands.
3.  **Crucially, 'Then' steps must be translated into verification or assertion commands.** These steps define the expected outcome and must be checked. Examples: \`*CompareValues ObjectName.FieldName = "expectedValue"\`, \`*CheckControlProperty ControlName PropertyName = "Expected" \`. Do not simply ignore 'Then' steps or re-state them as actions. If a 'Then' step implies a state (e.g., "the list should be refreshed"), generate a command that would verify that state, like checking a property of the list or looking for an expected item. If specific properties for verification are not obvious, use a placeholder or a generic check like \`*CompareValues SomeRelevantControl.IsRefreshed = True\` or add a comment like \`// Verify: [original 'Then' step text]\`.
4.  Use a generic, action-oriented command syntax. For example:
    *   Navigation/View Activation: \`*Action NavigateTo "ViewCaption"\`, \`*Action Show MyObject List\`
    *   User Actions (Login, Logout, Custom Actions): \`*Action Login\`, \`*Action My Custom Action Name\`
    *   Setting Field Values: \`*FillField ObjectName.FieldName = "value"\`, \`*FillField FieldCaption = "value"\`
    *   Clicking Buttons/Actions: \`*Action ActionCaption\` (e.g., \`*Action Save and Close\`, \`*Action New\`, \`*Action Refresh\`)
    *   Record Processing/Selection: \`*ProcessRecord ObjectName criteriaValue\` (e.g., \`*ProcessRecord Contact "John Nilsen"\`), \`*ProcessRecord Contact (Full Name = "John Nilsen")\`
    *   Verifications/Assertions (Primarily for 'Then' steps): \`*CompareValues ObjectName.FieldName = "expectedValue"\`, \`*CheckControlProperty SomeControl Visible = True\`
    *   Object Deletion: \`*Action Delete\`
    *   Checking a checkbox: \`*FillField CheckBoxCaption = True\`
5.  Handle parameters from Gherkin steps (e.g., values in quotes like "John Nilsen" or "Login button") and incorporate them appropriately into the script commands. Make sure string parameters in the script are enclosed in double quotes.
6.  For identifiers (like ObjectName, FieldName, ActionCaption, ViewCaption), infer them from the Gherkin text.
    *   If Gherkin says "Given I am on the 'Contacts' list view", generate \`*Action NavigateTo "Contacts"\`.
    *   If Gherkin says "When I set the 'Full Name' field to 'John Nilsen' for the 'Contact'", generate \`*FillField Contact.Full Name = "John Nilsen"\`.
    *   If Gherkin says "Then the 'Status' of the 'Order' should be 'Shipped'", generate \`*CompareValues Order.Status = "Shipped"\`.
7.  Assume a standard context and action availability. If an action or field is clearly implied, generate the corresponding command.
8.  **If multiple Gherkin scenarios are provided, clearly delineate each scenario in the output script.** Use a comment (e.g., \`// Scenario: Refresh the roles list\`) before the commands for each scenario.
9.  Produce ONLY the test script commands, one command per line. Do not include any other explanations, introductory text, or Gherkin keywords (like Given, When, Then) in the output script itself, only in comments if used for scenario names. Valid comments start with \`//\`.

Gherkin Input:
\`\`\`gherkin
{{{gherkinInput}}}
\`\`\`

{{#if htmlContext}}
Relevant HTML Context (use this to understand UI elements or application structure if it helps clarify Gherkin steps):
\`\`\`html
{{{htmlContext}}}
\`\`\`
{{/if}}

{{#if codeSnippets}}
Relevant Code Snippets{{#if snippetLanguage}} (Language: {{snippetLanguage}}){{/if}} (use this for contextual understanding of application logic, custom actions, or automation patterns that might influence command generation):
\`\`\`
{{{codeSnippets}}}
\`\`\`
{{/if}}

Generated Test Script:
`,
});

const convertGherkinToTestScriptFlow = ai.defineFlow(
  {
    name: 'convertGherkinToTestScriptFlow',
    inputSchema: ConvertGherkinToTestScriptInputSchema,
    outputSchema: ConvertGherkinToTestScriptOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    // Ensure the output property name matches the updated schema
    return { testScript: output!.testScript };
  }
);
