// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview This file defines a Genkit flow for administrators to create a user profile directly in Firestore.
 *
 * - adminCreateUser - A function that takes user details and creates a profile document.
 * - AdminCreateUserInput - The input type for the adminCreateUser function.
 * - AdminCreateUserOutput - The return type for the adminCreateUser function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import { createUserProfile } from '@/lib/firebase/firestoreService';

const AdminCreateUserInputSchema = z.object({
  uid: z.string().describe('The unique identifier for the user (can be any string for manual creation).'),
  email: z.string().email().describe('The email address for the new user.'),
  createdAt: z.string().optional().describe('Optional: The ISO 8601 timestamp for when the user was created. Defaults to the current time.'),
});
export type AdminCreateUserInput = z.infer<typeof AdminCreateUserInputSchema>;

const AdminCreateUserOutputSchema = z.object({
  message: z.string().describe('A confirmation message indicating the result of the operation.'),
  uid: z.string(),
  email: z.string(),
});
export type AdminCreateUserOutput = z.infer<typeof AdminCreateUserOutputSchema>;

export async function adminCreateUser(input: AdminCreateUserInput): Promise<AdminCreateUserOutput> {
  return adminCreateUserFlow(input);
}

const adminCreateUserFlow = ai.defineFlow(
  {
    name: 'adminCreateUserFlow',
    inputSchema: AdminCreateUserInputSchema,
    outputSchema: AdminCreateUserOutputSchema,
  },
  async (input) => {
    try {
      const userData = {
        uid: input.uid,
        email: input.email,
        createdAt: input.createdAt || new Date().toISOString(),
      };

      await createUserProfile(userData);

      console.log(`Successfully created user profile for UID: ${input.uid}`);
      return {
        message: `Successfully created user profile for ${input.email}.`,
        uid: input.uid,
        email: input.email,
      };
    } catch (error) {
      console.error('Error in adminCreateUserFlow:', error);
      // In a real app, you might want more specific error handling
      throw new Error(`Failed to create user profile: ${error instanceof Error ? error.message : String(error)}`);
    }
  }
);
